
QUTMS_AMU_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000812  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000886  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002553  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0f  00000000  00000000  00002f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e3c  00000000  00000000  00003ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00004ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001155  00000000  00000000  00004f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000153b  00000000  00000000  00006071  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000075ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	12 d0       	rcall	.+36     	; 0xce <main>
  aa:	b1 c3       	rjmp	.+1890   	; 0x80e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <AMU_init>:
Returns :   void
Notes   :
============================================================================*/
void AMU_init() 
{
	DDRB = 0b10110000; // MOSI and SCK and CAN_CS as output, SS output
  ae:	80 eb       	ldi	r24, 0xB0	; 176
  b0:	84 b9       	out	0x04, r24	; 4
	DDRA = 0b01010001; // LEDS
  b2:	81 e5       	ldi	r24, 0x51	; 81
  b4:	81 b9       	out	0x01, r24	; 1
	// Set Pre-charge, Shutdown+ and Shutdown- as outputs
	DDRD = 0b00001110;
  b6:	8e e0       	ldi	r24, 0x0E	; 14
  b8:	8a b9       	out	0x0a, r24	; 10
	
	CAN_CS_PORT |= (1 << CAN_CS); // CS high to turn off
  ba:	10 9a       	sbi	0x02, 0	; 2
	
	SHDN_NEG_OFF;
  bc:	59 98       	cbi	0x0b, 1	; 11
	SHDN_POS_OFF;
  be:	5b 98       	cbi	0x0b, 3	; 11
	PRE_CHARGE_OFF;
  c0:	5a 98       	cbi	0x0b, 2	; 11
	
	//adc_init();
	//uart0_init(9600);
	spi_init(0,0); // 1,0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	7d d3       	rcall	.+1786   	; 0x7c2 <spi_init>
	MCP2517_init();
  c8:	96 d0       	rcall	.+300    	; 0x1f6 <MCP2517_init>
  ca:	78 94       	sei
	sei(); // Enable interrupts
  cc:	08 95       	ret

000000ce <main>:
  ce:	cf 93       	push	r28
}

int main(void)
{
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	2d 97       	sbiw	r28, 0x0d	; 13
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
    AMU_init();
  e2:	e5 df       	rcall	.-54     	; 0xae <AMU_init>
	
	uint8_t data[8] = {0};
  e4:	fe 01       	movw	r30, r28
  e6:	31 96       	adiw	r30, 0x01	; 1
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	df 01       	movw	r26, r30
  ec:	1d 92       	st	X+, r1
  ee:	8a 95       	dec	r24
  f0:	e9 f7       	brne	.-6      	; 0xec <main+0x1e>
	uint8_t numDataBytes;
	
    while(1) 
    {
		// Fan control pin is BMS alarm
		MCP2517_recieveMessage(&receiveID, &numDataBytes, data);
  f2:	ae 01       	movw	r20, r28
  f4:	4f 5f       	subi	r20, 0xFF	; 255
  f6:	5f 4f       	sbci	r21, 0xFF	; 255
  f8:	be 01       	movw	r22, r28
  fa:	63 5f       	subi	r22, 0xF3	; 243
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
  fe:	ce 01       	movw	r24, r28
 100:	09 96       	adiw	r24, 0x09	; 9
 102:	01 d2       	rcall	.+1026   	; 0x506 <MCP2517_recieveMessage>
		if(receiveID == CAN_RECEIVE_ID_PDM >> 18) { // Use PDM CAN packet
 104:	89 85       	ldd	r24, Y+9	; 0x09
 106:	9a 85       	ldd	r25, Y+10	; 0x0a
 108:	ab 85       	ldd	r26, Y+11	; 0x0b
 10a:	bc 85       	ldd	r27, Y+12	; 0x0c
 10c:	80 34       	cpi	r24, 0x40	; 64
 10e:	92 40       	sbci	r25, 0x02	; 2
 110:	a1 05       	cpc	r26, r1
 112:	b1 05       	cpc	r27, r1
 114:	f1 f4       	brne	.+60     	; 0x152 <main+0x84>
			/* Byte 0 */
			if(CHECK_BIT(data[0], 6)) { // Shutdown -
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	86 ff       	sbrs	r24, 6
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x52>
				SHDN_NEG_ON;
 11c:	59 9a       	sbi	0x0b, 1	; 11
 11e:	01 c0       	rjmp	.+2      	; 0x122 <main+0x54>
			} else {
				SHDN_NEG_OFF;
 120:	59 98       	cbi	0x0b, 1	; 11
			}
			if(CHECK_BIT(data[0], 7)) { // Shutdown +
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	88 23       	and	r24, r24
 126:	1c f4       	brge	.+6      	; 0x12e <main+0x60>
				SHDN_POS_ON;
 128:	5b 9a       	sbi	0x0b, 3	; 11
				LED_A_ON;
 12a:	16 9a       	sbi	0x02, 6	; 2
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0x64>
			} else {
				SHDN_POS_OFF;
 12e:	5b 98       	cbi	0x0b, 3	; 11
				LED_A_OFF;
 130:	16 98       	cbi	0x02, 6	; 2
			}
			/* Byte 5 */
			if(CHECK_BIT(data[5], 0)) { // Pre-charge
 132:	8e 81       	ldd	r24, Y+6	; 0x06
 134:	80 ff       	sbrs	r24, 0
 136:	03 c0       	rjmp	.+6      	; 0x13e <main+0x70>
				PRE_CHARGE_ON;
 138:	5a 9a       	sbi	0x0b, 2	; 11
				LED_B_ON;
 13a:	14 9a       	sbi	0x02, 4	; 2
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0x74>
			} else {
				PRE_CHARGE_OFF;
 13e:	5a 98       	cbi	0x0b, 2	; 11
				LED_B_OFF;
 140:	14 98       	cbi	0x02, 4	; 2
			}
			MCP2517_transmitMessage(CAN_SEND_ID_AMU, 5, AMU_DATA);
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	31 e0       	ldi	r19, 0x01	; 1
 146:	45 e0       	ldi	r20, 0x05	; 5
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	92 e0       	ldi	r25, 0x02	; 2
 150:	bd d2       	rcall	.+1402   	; 0x6cc <MCP2517_transmitMessage>
		} else {
			//
		}		
		receiveID = 0;		
 152:	19 86       	std	Y+9, r1	; 0x09
 154:	1a 86       	std	Y+10, r1	; 0x0a
 156:	1b 86       	std	Y+11, r1	; 0x0b
 158:	1c 86       	std	Y+12, r1	; 0x0c
    }
 15a:	cb cf       	rjmp	.-106    	; 0xf2 <main+0x24>

0000015c <MCP2517_assertCS>:
		const uint32_t readBackValue = MCP2517_readReg32(0x400);
		if (readBackValue != i) {
			uart0_transmit(MCP2517_RAM_ERROR); // Error code
		}
	}
}
 15c:	10 98       	cbi	0x02, 0	; 2
 15e:	08 95       	ret

00000160 <MCP2517_deassertCS>:
 160:	10 9a       	sbi	0x02, 0	; 2
 162:	08 95       	ret

00000164 <MCP2517_reset>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <MCP2517_reset+0x6>
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	1a 82       	std	Y+2, r1	; 0x02
 170:	19 82       	std	Y+1, r1	; 0x01
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	f2 df       	rcall	.-28     	; 0x15c <MCP2517_assertCS>
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	28 d3       	rcall	.+1616   	; 0x7d0 <spi_transfer_buffer>
 180:	ef df       	rcall	.-34     	; 0x160 <MCP2517_deassertCS>
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <MCP2517_setMode>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	00 d0       	rcall	.+0      	; 0x192 <MCP2517_setMode+0x6>
 192:	1f 92       	push	r1
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
 198:	90 e2       	ldi	r25, 0x20	; 32
 19a:	99 83       	std	Y+1, r25	; 0x01
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	9a 83       	std	Y+2, r25	; 0x02
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	8b 83       	std	Y+3, r24	; 0x03
 1a4:	db df       	rcall	.-74     	; 0x15c <MCP2517_assertCS>
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	ce 01       	movw	r24, r28
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	11 d3       	rcall	.+1570   	; 0x7d0 <spi_transfer_buffer>
 1ae:	d8 df       	rcall	.-80     	; 0x160 <MCP2517_deassertCS>
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <MCP2517_getMode>:
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <MCP2517_getMode+0x6>
 1c2:	1f 92       	push	r1
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	19 82       	std	Y+1, r1	; 0x01
 1ca:	1a 82       	std	Y+2, r1	; 0x02
 1cc:	1b 82       	std	Y+3, r1	; 0x03
 1ce:	80 e3       	ldi	r24, 0x30	; 48
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	8a 83       	std	Y+2, r24	; 0x02
 1d6:	c2 df       	rcall	.-124    	; 0x15c <MCP2517_assertCS>
 1d8:	63 e0       	ldi	r22, 0x03	; 3
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	f8 d2       	rcall	.+1520   	; 0x7d0 <spi_transfer_buffer>
 1e0:	bf df       	rcall	.-130    	; 0x160 <MCP2517_deassertCS>
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	82 95       	swap	r24
 1e6:	86 95       	lsr	r24
 1e8:	87 70       	andi	r24, 0x07	; 7
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <MCP2517_init>:

// Initalise the MCP2517 chip
void MCP2517_init() {
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <MCP2517_init+0xc>
 202:	00 d0       	rcall	.+0      	; 0x204 <MCP2517_init+0xe>
 204:	00 d0       	rcall	.+0      	; 0x206 <MCP2517_init+0x10>
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
	//cli(); // Disable interrupts while configuring
	
	// Request configuration mode
	MCP2517_setMode(MCP2517_CONFIGURATION_MODE);
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	bf df       	rcall	.-130    	; 0x18c <MCP2517_setMode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	8f e3       	ldi	r24, 0x3F	; 63
 210:	9f e1       	ldi	r25, 0x1F	; 31
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <MCP2517_init+0x1c>
 216:	00 c0       	rjmp	.+0      	; 0x218 <MCP2517_init+0x22>
	// Wait 2ms for chip to change modes
	_delay_ms(2);
	// Check that chip is now in config mode
	uint8_t mode = MCP2517_getMode();
 218:	00 00       	nop
 21a:	d0 df       	rcall	.-96     	; 0x1bc <MCP2517_getMode>
	if(mode != MCP2517_CONFIGURATION_MODE) {
 21c:	84 30       	cpi	r24, 0x04	; 4
		//LED_A_ON;
		uart0_transmit(MCP2517_MODE_SELECT_ERROR);
 21e:	11 f0       	breq	.+4      	; 0x224 <MCP2517_init+0x2e>
 220:	83 e0       	ldi	r24, 0x03	; 3
	}
	//
	// Perform software reset
	MCP2517_reset();
 222:	ed d2       	rcall	.+1498   	; 0x7fe <uart0_transmit>
 224:	9f df       	rcall	.-194    	; 0x164 <MCP2517_reset>
 226:	ef e3       	ldi	r30, 0x3F	; 63
 228:	ff e1       	ldi	r31, 0x1F	; 31
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <MCP2517_init+0x34>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <MCP2517_init+0x3a>
	// Let the chip change modes
	_delay_ms(2);
	// Check that chip has flipped
	mode = MCP2517_getMode();
 230:	00 00       	nop
	if(mode != MCP2517_CONFIGURATION_MODE) {
 232:	c4 df       	rcall	.-120    	; 0x1bc <MCP2517_getMode>
 234:	84 30       	cpi	r24, 0x04	; 4
		//LED_B_ON;
		uart0_transmit(MCP2517_MODE_SELECT_ERROR);
 236:	11 f0       	breq	.+4      	; 0x23c <MCP2517_init+0x46>
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	e1 d2       	rcall	.+1474   	; 0x7fe <uart0_transmit>
	spi_transfer_buffer(buff, 3);
	MCP2517_deassertCS();
}

inline void MCP2517_writeReg32(const uint16_t regAddr, const uint32_t value) {
	uint8_t buff[6] = {0};
 23c:	8e 01       	movw	r16, r28
 23e:	0f 5f       	subi	r16, 0xFF	; 255
 240:	1f 4f       	sbci	r17, 0xFF	; 255
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	f8 01       	movw	r30, r16
 246:	11 92       	st	Z+, r1
 248:	8a 95       	dec	r24
 24a:	e9 f7       	brne	.-6      	; 0x246 <MCP2517_init+0x50>
	
	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 24c:	68 94       	set
 24e:	ff 24       	eor	r15, r15
 250:	f5 f8       	bld	r15, 5
 252:	f9 82       	std	Y+1, r15	; 0x01
	buff[1] = (uint8_t) (regAddr & 0xFF);
 254:	84 e0       	ldi	r24, 0x04	; 4

// *****************************************************************************
// Helper Functions
// *****************************************************************************
inline void enterWordInBufferAtIndex (const uint32_t value, uint8_t buff[], const uint8_t index) {
	buff[index + 0] = (uint8_t) value;
 256:	8a 83       	std	Y+2, r24	; 0x02
 258:	8f e0       	ldi	r24, 0x0F	; 15
	buff[index + 1] = (uint8_t) (value >> 8);
	buff[index + 2] = (uint8_t) (value >> 16);
 25a:	8b 83       	std	Y+3, r24	; 0x03
	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
	buff[1] = (uint8_t) (regAddr & 0xFF);
	
	enterWordInBufferAtIndex(value, buff, 2);
	
	MCP2517_assertCS();
 25c:	8c 83       	std	Y+4, r24	; 0x04
 25e:	8e e3       	ldi	r24, 0x3E	; 62
	spi_transfer_buffer(buff, 6);
 260:	8d 83       	std	Y+5, r24	; 0x05
 262:	7c df       	rcall	.-264    	; 0x15c <MCP2517_assertCS>
 264:	66 e0       	ldi	r22, 0x06	; 6
	MCP2517_deassertCS();
 266:	c8 01       	movw	r24, r16
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
	buff[1] = (uint8_t) (regAddr & 0xFF);
 268:	b3 d2       	rcall	.+1382   	; 0x7d0 <spi_transfer_buffer>
 26a:	7a df       	rcall	.-268    	; 0x160 <MCP2517_deassertCS>
	buff[2] = value;
 26c:	f9 82       	std	Y+1, r15	; 0x01
 26e:	8f e5       	ldi	r24, 0x5F	; 95
	
	MCP2517_assertCS();
 270:	8a 83       	std	Y+2, r24	; 0x02
	spi_transfer_buffer(buff, 3);
 272:	8f ee       	ldi	r24, 0xEF	; 239
 274:	8b 83       	std	Y+3, r24	; 0x03
 276:	72 df       	rcall	.-284    	; 0x15c <MCP2517_assertCS>
	MCP2517_deassertCS();
 278:	63 e0       	ldi	r22, 0x03	; 3
 27a:	c8 01       	movw	r24, r16
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 27c:	a9 d2       	rcall	.+1362   	; 0x7d0 <spi_transfer_buffer>
	buff[1] = (uint8_t) (regAddr & 0xFF);
 27e:	70 df       	rcall	.-288    	; 0x160 <MCP2517_deassertCS>
 280:	f9 82       	std	Y+1, r15	; 0x01
	buff[2] = value;
 282:	8c e5       	ldi	r24, 0x5C	; 92
	
	MCP2517_assertCS();
 284:	8a 83       	std	Y+2, r24	; 0x02
	spi_transfer_buffer(buff, 3);
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	8b 83       	std	Y+3, r24	; 0x03
 28a:	68 df       	rcall	.-304    	; 0x15c <MCP2517_assertCS>
	MCP2517_deassertCS();
 28c:	63 e0       	ldi	r22, 0x03	; 3
 28e:	c8 01       	movw	r24, r16
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
	buff[1] = (uint8_t) (regAddr & 0xFF);
 290:	9f d2       	rcall	.+1342   	; 0x7d0 <spi_transfer_buffer>
 292:	66 df       	rcall	.-308    	; 0x160 <MCP2517_deassertCS>
	buff[2] = value;
 294:	f9 82       	std	Y+1, r15	; 0x01
	
	MCP2517_assertCS();
 296:	8e e5       	ldi	r24, 0x5E	; 94
 298:	8a 83       	std	Y+2, r24	; 0x02
	spi_transfer_buffer(buff, 3);
 29a:	80 e6       	ldi	r24, 0x60	; 96
 29c:	8b 83       	std	Y+3, r24	; 0x03
 29e:	5e df       	rcall	.-324    	; 0x15c <MCP2517_assertCS>
 2a0:	63 e0       	ldi	r22, 0x03	; 3
	MCP2517_deassertCS();
 2a2:	c8 01       	movw	r24, r16
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 2a4:	95 d2       	rcall	.+1322   	; 0x7d0 <spi_transfer_buffer>
	buff[1] = (uint8_t) (regAddr & 0xFF);
 2a6:	5c df       	rcall	.-328    	; 0x160 <MCP2517_deassertCS>
	buff[2] = value;
 2a8:	f9 82       	std	Y+1, r15	; 0x01
 2aa:	8b e6       	ldi	r24, 0x6B	; 107
	
	MCP2517_assertCS();
 2ac:	8a 83       	std	Y+2, r24	; 0x02
 2ae:	83 e0       	ldi	r24, 0x03	; 3
	spi_transfer_buffer(buff, 3);
 2b0:	8b 83       	std	Y+3, r24	; 0x03
 2b2:	54 df       	rcall	.-344    	; 0x15c <MCP2517_assertCS>
 2b4:	63 e0       	ldi	r22, 0x03	; 3
	MCP2517_deassertCS();
 2b6:	c8 01       	movw	r24, r16
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 2b8:	8b d2       	rcall	.+1302   	; 0x7d0 <spi_transfer_buffer>
	buff[1] = (uint8_t) (regAddr & 0xFF);
 2ba:	52 df       	rcall	.-348    	; 0x160 <MCP2517_deassertCS>
	buff[2] = value;
 2bc:	81 e2       	ldi	r24, 0x21	; 33
 2be:	89 83       	std	Y+1, r24	; 0x01
	
	MCP2517_assertCS();
 2c0:	80 ed       	ldi	r24, 0xD0	; 208
 2c2:	8a 83       	std	Y+2, r24	; 0x02
	spi_transfer_buffer(buff, 3);
 2c4:	82 e8       	ldi	r24, 0x82	; 130
 2c6:	8b 83       	std	Y+3, r24	; 0x03
 2c8:	49 df       	rcall	.-366    	; 0x15c <MCP2517_assertCS>
	MCP2517_deassertCS();
 2ca:	63 e0       	ldi	r22, 0x03	; 3
 2cc:	c8 01       	movw	r24, r16
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 2ce:	80 d2       	rcall	.+1280   	; 0x7d0 <spi_transfer_buffer>
 2d0:	47 df       	rcall	.-370    	; 0x160 <MCP2517_deassertCS>
	buff[1] = (uint8_t) (regAddr & 0xFF);
 2d2:	8e e2       	ldi	r24, 0x2E	; 46
 2d4:	89 83       	std	Y+1, r24	; 0x01
	buff[2] = value;
 2d6:	8c e0       	ldi	r24, 0x0C	; 12
 2d8:	8a 83       	std	Y+2, r24	; 0x02
	
	MCP2517_assertCS();
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	8b 83       	std	Y+3, r24	; 0x03
	spi_transfer_buffer(buff, 3);
 2de:	3e df       	rcall	.-388    	; 0x15c <MCP2517_assertCS>
 2e0:	63 e0       	ldi	r22, 0x03	; 3
 2e2:	c8 01       	movw	r24, r16
 2e4:	75 d2       	rcall	.+1258   	; 0x7d0 <spi_transfer_buffer>
	MCP2517_deassertCS();
 2e6:	3c df       	rcall	.-392    	; 0x160 <MCP2517_deassertCS>
 2e8:	86 e0       	ldi	r24, 0x06	; 6
	// Enable ECC
	d = 0x01;
	MCP2517_writeReg8(MCP2517_REG_ADDR_ECCCON, d);
	
	// Configuration Done: Select CAN 2.0B Mode - For testing use external loopback
	MCP2517_setMode(MCP2517_CLASSIC_MODE);
 2ea:	50 df       	rcall	.-352    	; 0x18c <MCP2517_setMode>
 2ec:	8f e3       	ldi	r24, 0x3F	; 63
 2ee:	9f e1       	ldi	r25, 0x1F	; 31
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <MCP2517_init+0xfa>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <MCP2517_init+0x100>
 2f6:	00 00       	nop
 2f8:	61 df       	rcall	.-318    	; 0x1bc <MCP2517_getMode>
 2fa:	26 96       	adiw	r28, 0x06	; 6
	_delay_ms(2);
	mode = MCP2517_getMode();
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
	////
	//
	//
	//
	////sei(); // Re-enable interrupts
}
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	08 95       	ret

00000312 <MCP2517_receiveFifoStatus>:
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28


// *****************************************************************************
// MCP2517 FIFO Status Functions
// *****************************************************************************
uint8_t MCP2517_receiveFifoStatus(MCP2517_FIFO_CHANNEL channel, MCP2517_RX_FIFO_STATUS *flags) {
 318:	df 93       	push	r29
 31a:	00 d0       	rcall	.+0      	; 0x31c <MCP2517_receiveFifoStatus+0xa>
 31c:	1f 92       	push	r1
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	8b 01       	movw	r16, r22
	uint8_t status = MCP2517_readReg8(MCP2517_REG_ADDR_C1FIFOSTA + (channel * MCP2517_C1FIFO_OFFSET));
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	9c 01       	movw	r18, r24
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	82 0f       	add	r24, r18
 32e:	93 1f       	adc	r25, r19
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	8c 5a       	subi	r24, 0xAC	; 172
 33a:	9f 4f       	sbci	r25, 0xFF	; 255

// *****************************************************************************
// SPI Read Functions
// *****************************************************************************
inline uint8_t MCP2517_readReg8(const uint16_t regAddr) {
	uint8_t buff[3] = {0};
 33c:	19 82       	std	Y+1, r1	; 0x01
 33e:	1a 82       	std	Y+2, r1	; 0x02
 340:	1b 82       	std	Y+3, r1	; 0x03

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_READ << 4) + ((regAddr >> 8) & 0xF));
 342:	9f 70       	andi	r25, 0x0F	; 15
 344:	90 5d       	subi	r25, 0xD0	; 208
 346:	99 83       	std	Y+1, r25	; 0x01
	buff[1] = (uint8_t) (regAddr & 0xFF);
 348:	8a 83       	std	Y+2, r24	; 0x02
	buff[2] = 0x00;
	
	MCP2517_assertCS();
 34a:	08 df       	rcall	.-496    	; 0x15c <MCP2517_assertCS>
	spi_transfer_buffer(buff, 3);
 34c:	63 e0       	ldi	r22, 0x03	; 3
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
	MCP2517_deassertCS();
 352:	3e d2       	rcall	.+1148   	; 0x7d0 <spi_transfer_buffer>
 354:	05 df       	rcall	.-502    	; 0x160 <MCP2517_deassertCS>
	
	return buff[2];
 356:	8b 81       	ldd	r24, Y+3	; 0x03
// *****************************************************************************
uint8_t MCP2517_receiveFifoStatus(MCP2517_FIFO_CHANNEL channel, MCP2517_RX_FIFO_STATUS *flags) {
	uint8_t status = MCP2517_readReg8(MCP2517_REG_ADDR_C1FIFOSTA + (channel * MCP2517_C1FIFO_OFFSET));
	
	// Update channel status
	*flags = (MCP2517_RX_FIFO_STATUS) ((status) & MCP2517_RX_FIFO_ALL_STATUS);
 358:	98 2f       	mov	r25, r24
 35a:	9f 70       	andi	r25, 0x0F	; 15
 35c:	f8 01       	movw	r30, r16
 35e:	90 83       	st	Z, r25
	
	return status;
}
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	08 95       	ret

00000370 <MCP2517_transmitFifoStatus>:


uint8_t MCP2517_transmitFifoStatus(MCP2517_FIFO_CHANNEL channel, MCP2517_TX_FIFO_STATUS *flags) {
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	00 d0       	rcall	.+0      	; 0x37a <MCP2517_transmitFifoStatus+0xa>
 37a:	1f 92       	push	r1
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	8b 01       	movw	r16, r22
	uint8_t status = MCP2517_readReg8(MCP2517_REG_ADDR_C1FIFOSTA + (channel * MCP2517_C1FIFO_OFFSET));
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	9c 01       	movw	r18, r24
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	82 0f       	add	r24, r18
 38c:	93 1f       	adc	r25, r19
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	8c 5a       	subi	r24, 0xAC	; 172
 398:	9f 4f       	sbci	r25, 0xFF	; 255

// *****************************************************************************
// SPI Read Functions
// *****************************************************************************
inline uint8_t MCP2517_readReg8(const uint16_t regAddr) {
	uint8_t buff[3] = {0};
 39a:	19 82       	std	Y+1, r1	; 0x01
 39c:	1a 82       	std	Y+2, r1	; 0x02
 39e:	1b 82       	std	Y+3, r1	; 0x03

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_READ << 4) + ((regAddr >> 8) & 0xF));
 3a0:	9f 70       	andi	r25, 0x0F	; 15
 3a2:	90 5d       	subi	r25, 0xD0	; 208
 3a4:	99 83       	std	Y+1, r25	; 0x01
	buff[1] = (uint8_t) (regAddr & 0xFF);
 3a6:	8a 83       	std	Y+2, r24	; 0x02
	buff[2] = 0x00;
	
	MCP2517_assertCS();
 3a8:	d9 de       	rcall	.-590    	; 0x15c <MCP2517_assertCS>
	spi_transfer_buffer(buff, 3);
 3aa:	63 e0       	ldi	r22, 0x03	; 3
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
	MCP2517_deassertCS();
 3b0:	0f d2       	rcall	.+1054   	; 0x7d0 <spi_transfer_buffer>
 3b2:	d6 de       	rcall	.-596    	; 0x160 <MCP2517_deassertCS>
	
	return buff[2];
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03

uint8_t MCP2517_transmitFifoStatus(MCP2517_FIFO_CHANNEL channel, MCP2517_TX_FIFO_STATUS *flags) {
	uint8_t status = MCP2517_readReg8(MCP2517_REG_ADDR_C1FIFOSTA + (channel * MCP2517_C1FIFO_OFFSET));
	
	// Update channel status
	*flags = (MCP2517_TX_FIFO_STATUS) ((status) & MCP2517_TX_FIFO_ALL_STATUS);
 3b6:	98 2f       	mov	r25, r24
 3b8:	97 71       	andi	r25, 0x17	; 23
 3ba:	f8 01       	movw	r30, r16
 3bc:	90 83       	st	Z, r25
	
	return status;
}
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	08 95       	ret

000003ce <MCP2517_readMsgReceive>:
		_delay_ms(100);
		//LED_B_OFF;
	}
}

void MCP2517_readMsgReceive(CAN_RECEIVE_ADDRESS *receiveID, uint8_t *numDataBytes, uint8_t *data, MCP2517_RX_MSG_OBJ *rxObj) {
 3ce:	6f 92       	push	r6
 3d0:	7f 92       	push	r7
 3d2:	8f 92       	push	r8
 3d4:	9f 92       	push	r9
 3d6:	af 92       	push	r10
 3d8:	bf 92       	push	r11
 3da:	cf 92       	push	r12
 3dc:	df 92       	push	r13
 3de:	ef 92       	push	r14
 3e0:	ff 92       	push	r15
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	6b 97       	sbiw	r28, 0x1b	; 27
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
 3fa:	3c 01       	movw	r6, r24
 3fc:	4b 01       	movw	r8, r22
 3fe:	a4 2e       	mov	r10, r20
 400:	b5 2e       	mov	r11, r21
 402:	89 01       	movw	r16, r18
	
	uint8_t buff[MCP2517_MAX_MSG_SIZE] = {0}; // Max size of transmit message
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	7c 01       	movw	r14, r24
 40a:	85 e1       	ldi	r24, 0x15	; 21
 40c:	f7 01       	movw	r30, r14
 40e:	11 92       	st	Z+, r1
 410:	8a 95       	dec	r24
 412:	e9 f7       	brne	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	return buff[2];
}

// change to uint8_t
inline uint32_t MCP2517_readReg32(const uint16_t regAddr) {
	uint8_t buff[6] = {0};
 414:	6e 01       	movw	r12, r28
 416:	f6 e1       	ldi	r31, 0x16	; 22
 418:	cf 0e       	add	r12, r31
 41a:	d1 1c       	adc	r13, r1
 41c:	86 e0       	ldi	r24, 0x06	; 6
 41e:	f6 01       	movw	r30, r12
 420:	11 92       	st	Z+, r1
 422:	8a 95       	dec	r24
 424:	e9 f7       	brne	.-6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_READ << 4) + ((regAddr >> 8) & 0xF));
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	8e 8b       	std	Y+22, r24	; 0x16
	buff[1] = (uint8_t) (regAddr & 0xFF);
 42a:	80 e7       	ldi	r24, 0x70	; 112
 42c:	8f 8b       	std	Y+23, r24	; 0x17
	buff[2] = 0x00;

	MCP2517_assertCS();
 42e:	96 de       	rcall	.-724    	; 0x15c <MCP2517_assertCS>
	spi_transfer_buffer(buff, 6);
 430:	66 e0       	ldi	r22, 0x06	; 6
 432:	c6 01       	movw	r24, r12
	MCP2517_deassertCS();
 434:	cd d1       	rcall	.+922    	; 0x7d0 <spi_transfer_buffer>
 436:	94 de       	rcall	.-728    	; 0x160 <MCP2517_deassertCS>
	buff[index + 2] = (uint8_t) (value >> 16);
	buff[index + 3] = (uint8_t) (value >> 24);
}

inline uint32_t wordFromBufferAtIndex (uint8_t buff[], const uint8_t index) {
	uint32_t result = (uint32_t) buff[index + 0];
 438:	28 8d       	ldd	r18, Y+24	; 0x18
	result |= ((uint32_t) buff[index + 1]) << 8;
	result |= ((uint32_t) buff[index + 2]) << 16;
 43a:	39 8d       	ldd	r19, Y+25	; 0x19
 43c:	8a 8d       	ldd	r24, Y+26	; 0x1a
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	a0 e0       	ldi	r26, 0x00	; 0
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	dc 01       	movw	r26, r24
 446:	99 27       	eor	r25, r25
 448:	88 27       	eor	r24, r24
 44a:	93 2b       	or	r25, r19
 44c:	82 2b       	or	r24, r18
void MCP2517_readMsgReceive(CAN_RECEIVE_ADDRESS *receiveID, uint8_t *numDataBytes, uint8_t *data, MCP2517_RX_MSG_OBJ *rxObj) {
	
	uint8_t buff[MCP2517_MAX_MSG_SIZE] = {0}; // Max size of transmit message
	
	// Write instruction
	const uint16_t regAddr = MCP2517_RAM_ADDR_START + MCP2517_readReg32(MCP2517_REG_ADDR_C1FIFOUA + (MCP2517_RX_FIFO * MCP2517_C1FIFO_OFFSET));
 44e:	9c 5f       	subi	r25, 0xFC	; 252
	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_READ << 4) + ((regAddr >> 8) & 0xF));
 450:	9f 70       	andi	r25, 0x0F	; 15
 452:	90 5d       	subi	r25, 0xD0	; 208
	buff[1] = (uint8_t) (regAddr & 0xFF);
 454:	99 83       	std	Y+1, r25	; 0x01
	
	// SPI Transfer
	MCP2517_assertCS();
 456:	8a 83       	std	Y+2, r24	; 0x02
	spi_transfer_buffer(buff, sizeof(buff));
 458:	81 de       	rcall	.-766    	; 0x15c <MCP2517_assertCS>
 45a:	65 e1       	ldi	r22, 0x15	; 21
 45c:	c7 01       	movw	r24, r14
 45e:	b8 d1       	rcall	.+880    	; 0x7d0 <spi_transfer_buffer>
	MCP2517_deassertCS();
 460:	7f de       	rcall	.-770    	; 0x160 <MCP2517_deassertCS>
 462:	3b 81       	ldd	r19, Y+3	; 0x03
	
	// Get frame ID and Control bits
	rxObj->MCP2517_word[0] = 0;
	rxObj->MCP2517_word[1] = 0;
	
	rxObj->MCP2517_byte[0] = buff[2];
 464:	f8 01       	movw	r30, r16
 466:	30 83       	st	Z, r19
 468:	2c 81       	ldd	r18, Y+4	; 0x04
	rxObj->MCP2517_byte[1] = buff[3];
 46a:	21 83       	std	Z+1, r18	; 0x01
 46c:	8d 81       	ldd	r24, Y+5	; 0x05
	rxObj->MCP2517_byte[2] = buff[4];
 46e:	82 83       	std	Z+2, r24	; 0x02
 470:	8e 81       	ldd	r24, Y+6	; 0x06
	rxObj->MCP2517_byte[3] = buff[5];
 472:	83 83       	std	Z+3, r24	; 0x03
 474:	8f 81       	ldd	r24, Y+7	; 0x07
	
	rxObj->MCP2517_byte[4] = buff[6];
 476:	84 83       	std	Z+4, r24	; 0x04
 478:	88 85       	ldd	r24, Y+8	; 0x08
	rxObj->MCP2517_byte[5] = buff[7];
 47a:	85 83       	std	Z+5, r24	; 0x05
 47c:	89 85       	ldd	r24, Y+9	; 0x09
	rxObj->MCP2517_byte[6] = buff[8];
 47e:	86 83       	std	Z+6, r24	; 0x06
 480:	8a 85       	ldd	r24, Y+10	; 0x0a
	rxObj->MCP2517_byte[7] = buff[9];
 482:	87 83       	std	Z+7, r24	; 0x07
 484:	83 2f       	mov	r24, r19
	
	// Get message ID
	*receiveID = (uint32_t) (rxObj->MCP2517_bF.MCP2517_id.MCP2517_SID);
 486:	92 2f       	mov	r25, r18
 488:	97 70       	andi	r25, 0x07	; 7
 48a:	a0 e0       	ldi	r26, 0x00	; 0
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	f3 01       	movw	r30, r6
 490:	80 83       	st	Z, r24
 492:	91 83       	std	Z+1, r25	; 0x01
 494:	a2 83       	std	Z+2, r26	; 0x02
 496:	b3 83       	std	Z+3, r27	; 0x03
 498:	f8 01       	movw	r30, r16
	
	// Get the number of data bytes (size of payload)
	*numDataBytes = (uint8_t) (rxObj->MCP2517_byte[4] & 0xF);
 49a:	84 81       	ldd	r24, Z+4	; 0x04
 49c:	8f 70       	andi	r24, 0x0F	; 15
 49e:	f4 01       	movw	r30, r8
 4a0:	80 83       	st	Z, r24
 4a2:	f8 01       	movw	r30, r16

	rxObj->MCP2517_word[2] = 0;
 4a4:	10 86       	std	Z+8, r1	; 0x08
 4a6:	11 86       	std	Z+9, r1	; 0x09
 4a8:	12 86       	std	Z+10, r1	; 0x0a
 4aa:	13 86       	std	Z+11, r1	; 0x0b
 4ac:	fe 01       	movw	r30, r28
 4ae:	3b 96       	adiw	r30, 0x0b	; 11
 4b0:	aa 2d       	mov	r26, r10
 4b2:	bb 2d       	mov	r27, r11
 4b4:	9e 01       	movw	r18, r28
 4b6:	2d 5e       	subi	r18, 0xED	; 237
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ba:	81 91       	ld	r24, Z+
	
	for(uint8_t i = 0; i < 8; i++) {
		data[i] = buff[i + 10];
 4bc:	8d 93       	st	X+, r24
 4be:	e2 17       	cp	r30, r18
	// Get the number of data bytes (size of payload)
	*numDataBytes = (uint8_t) (rxObj->MCP2517_byte[4] & 0xF);

	rxObj->MCP2517_word[2] = 0;
	
	for(uint8_t i = 0; i < 8; i++) {
 4c0:	f3 07       	cpc	r31, r19
 4c2:	d9 f7       	brne	.-10     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4c4:	80 e2       	ldi	r24, 0x20	; 32
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 4c6:	8e 8b       	std	Y+22, r24	; 0x16
	buff[1] = (uint8_t) (regAddr & 0xFF);
 4c8:	88 e6       	ldi	r24, 0x68	; 104
 4ca:	8f 8b       	std	Y+23, r24	; 0x17
	buff[2] = value;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
	
	MCP2517_assertCS();
 4ce:	88 8f       	std	Y+24, r24	; 0x18
 4d0:	45 de       	rcall	.-886    	; 0x15c <MCP2517_assertCS>
	spi_transfer_buffer(buff, 3);
 4d2:	63 e0       	ldi	r22, 0x03	; 3
 4d4:	ce 01       	movw	r24, r28
 4d6:	46 96       	adiw	r24, 0x16	; 22
 4d8:	7b d1       	rcall	.+758    	; 0x7d0 <spi_transfer_buffer>
 4da:	42 de       	rcall	.-892    	; 0x160 <MCP2517_deassertCS>
	MCP2517_deassertCS();
 4dc:	6b 96       	adiw	r28, 0x1b	; 27
 4de:	0f b6       	in	r0, 0x3f	; 63
	}
	
	// Increment FIFO buffer - set UNIC bit - Update channel
	const uint8_t d = 1 << 0;
	MCP2517_writeReg8(MCP2517_REG_ADDR_C1FIFOCON + (MCP2517_RX_FIFO * MCP2517_C1FIFO_OFFSET), d);
}
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ff 90       	pop	r15
 4f2:	ef 90       	pop	r14
 4f4:	df 90       	pop	r13
 4f6:	cf 90       	pop	r12
 4f8:	bf 90       	pop	r11
 4fa:	af 90       	pop	r10
 4fc:	9f 90       	pop	r9
 4fe:	8f 90       	pop	r8
 500:	7f 90       	pop	r7
 502:	6f 90       	pop	r6
 504:	08 95       	ret

00000506 <MCP2517_recieveMessage>:
 506:	cf 92       	push	r12
 508:	df 92       	push	r13


// *****************************************************************************
// MCP2517 Receive Functions
// *****************************************************************************
void MCP2517_recieveMessage(CAN_RECEIVE_ADDRESS *receiveID, uint8_t *numDataBytes, uint8_t *data) {
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	2d 97       	sbiw	r28, 0x0d	; 13
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	8c 01       	movw	r16, r24
 528:	7b 01       	movw	r14, r22
 52a:	6a 01       	movw	r12, r20
	MCP2517_RX_MSG_OBJ rxObj;
	MCP2517_RX_FIFO_STATUS rxFlags;
	
	// Check that FIFO is not empty
	MCP2517_receiveFifoStatus(MCP2517_RX_FIFO, &rxFlags);
 52c:	be 01       	movw	r22, r28
 52e:	63 5f       	subi	r22, 0xF3	; 243
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	ee de       	rcall	.-548    	; 0x312 <MCP2517_receiveFifoStatus>
	
	if (rxFlags & MCP2517_RX_FIFO_NOT_EMPTY_STATUS) {
 536:	8d 85       	ldd	r24, Y+13	; 0x0d
 538:	80 ff       	sbrs	r24, 0
 53a:	10 c0       	rjmp	.+32     	; 0x55c <MCP2517_recieveMessage+0x56>
		///LED_B_ON;
		// Read message
		MCP2517_readMsgReceive(receiveID, numDataBytes, data, &rxObj);
 53c:	9e 01       	movw	r18, r28
 53e:	2f 5f       	subi	r18, 0xFF	; 255
 540:	3f 4f       	sbci	r19, 0xFF	; 255
 542:	a6 01       	movw	r20, r12
 544:	b7 01       	movw	r22, r14
 546:	c8 01       	movw	r24, r16
 548:	42 df       	rcall	.-380    	; 0x3ce <MCP2517_readMsgReceive>
 54a:	2f ef       	ldi	r18, 0xFF	; 255
 54c:	81 ee       	ldi	r24, 0xE1	; 225
 54e:	94 e0       	ldi	r25, 0x04	; 4
 550:	21 50       	subi	r18, 0x01	; 1
 552:	80 40       	sbci	r24, 0x00	; 0
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <MCP2517_recieveMessage+0x4a>
 558:	00 c0       	rjmp	.+0      	; 0x55a <MCP2517_recieveMessage+0x54>
 55a:	00 00       	nop
		_delay_ms(100);
		//LED_B_OFF;
	}
}
 55c:	2d 96       	adiw	r28, 0x0d	; 13
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	ff 90       	pop	r15
 572:	ef 90       	pop	r14
 574:	df 90       	pop	r13
 576:	cf 90       	pop	r12
 578:	08 95       	ret

0000057a <MCP2517_loadMsgTXFifo>:
	
	return MCP2517_NO_ERROR;
}


void MCP2517_loadMsgTXFifo(MCP2517_TX_MSG_OBJ *txObj, uint8_t *payload, uint8_t numDataBytes) {
 57a:	af 92       	push	r10
 57c:	bf 92       	push	r11
 57e:	df 92       	push	r13
 580:	ef 92       	push	r14
 582:	ff 92       	push	r15
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	6b 97       	sbiw	r28, 0x1b	; 27
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	f8 94       	cli
 596:	de bf       	out	0x3e, r29	; 62
 598:	0f be       	out	0x3f, r0	; 63
 59a:	cd bf       	out	0x3d, r28	; 61
 59c:	8c 01       	movw	r16, r24
 59e:	d6 2e       	mov	r13, r22
 5a0:	e7 2e       	mov	r14, r23
 5a2:	f4 2e       	mov	r15, r20
	
	uint8_t buff[MCP2517_MAX_MSG_SIZE] = {0}; // Max number of transmit bytes
 5a4:	fe 01       	movw	r30, r28
 5a6:	31 96       	adiw	r30, 0x01	; 1
 5a8:	85 e1       	ldi	r24, 0x15	; 21
 5aa:	df 01       	movw	r26, r30
 5ac:	1d 92       	st	X+, r1
 5ae:	8a 95       	dec	r24
 5b0:	e9 f7       	brne	.-6      	; 0x5ac <MCP2517_loadMsgTXFifo+0x32>
	// Write only multiples of 4 to RAM
	uint8_t i;
	uint16_t n = 0;
	uint8_t j = 0;

	if (numDataBytes % 4) { // Largest value may be 3, lowest 0 - 1
 5b2:	84 2f       	mov	r24, r20
 5b4:	83 70       	andi	r24, 0x03	; 3
 5b6:	b9 f0       	breq	.+46     	; 0x5e6 <MCP2517_loadMsgTXFifo+0x6c>
		// Add bytes
		n = 4 - (numDataBytes % 4);
 5b8:	44 e0       	ldi	r20, 0x04	; 4
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	48 1b       	sub	r20, r24
 5be:	51 09       	sbc	r21, r1
		i = numDataBytes + 8;
 5c0:	98 e0       	ldi	r25, 0x08	; 8
 5c2:	9f 0d       	add	r25, r15
		for (j = 0; j < n; j++) {
 5c4:	41 15       	cp	r20, r1
 5c6:	51 05       	cpc	r21, r1
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <MCP2517_loadMsgTXFifo+0x6c>
 5ca:	80 e0       	ldi	r24, 0x00	; 0
			buff[i + 8 + j] = 0;
 5cc:	bf 01       	movw	r22, r30
 5ce:	69 0f       	add	r22, r25
 5d0:	71 1d       	adc	r23, r1
 5d2:	fb 01       	movw	r30, r22
 5d4:	e8 0f       	add	r30, r24
 5d6:	f1 1d       	adc	r31, r1
 5d8:	10 86       	std	Z+8, r1	; 0x08

	if (numDataBytes % 4) { // Largest value may be 3, lowest 0 - 1
		// Add bytes
		n = 4 - (numDataBytes % 4);
		i = numDataBytes + 8;
		for (j = 0; j < n; j++) {
 5da:	8f 5f       	subi	r24, 0xFF	; 255
 5dc:	28 2f       	mov	r18, r24
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	24 17       	cp	r18, r20
 5e2:	35 07       	cpc	r19, r21
 5e4:	b0 f3       	brcs	.-20     	; 0x5d2 <MCP2517_loadMsgTXFifo+0x58>
	return buff[2];
}

// change to uint8_t
inline uint32_t MCP2517_readReg32(const uint16_t regAddr) {
	uint8_t buff[6] = {0};
 5e6:	5e 01       	movw	r10, r28
 5e8:	b6 e1       	ldi	r27, 0x16	; 22
 5ea:	ab 0e       	add	r10, r27
 5ec:	b1 1c       	adc	r11, r1
 5ee:	86 e0       	ldi	r24, 0x06	; 6
 5f0:	f5 01       	movw	r30, r10
 5f2:	11 92       	st	Z+, r1
 5f4:	8a 95       	dec	r24
 5f6:	e9 f7       	brne	.-6      	; 0x5f2 <MCP2517_loadMsgTXFifo+0x78>

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_READ << 4) + ((regAddr >> 8) & 0xF));
 5f8:	80 e3       	ldi	r24, 0x30	; 48
 5fa:	8e 8b       	std	Y+22, r24	; 0x16
	buff[1] = (uint8_t) (regAddr & 0xFF);
 5fc:	84 e6       	ldi	r24, 0x64	; 100
 5fe:	8f 8b       	std	Y+23, r24	; 0x17
	buff[2] = 0x00;

	MCP2517_assertCS();
 600:	ad dd       	rcall	.-1190   	; 0x15c <MCP2517_assertCS>
	spi_transfer_buffer(buff, 6);
 602:	66 e0       	ldi	r22, 0x06	; 6
 604:	c5 01       	movw	r24, r10
	MCP2517_deassertCS();
 606:	e4 d0       	rcall	.+456    	; 0x7d0 <spi_transfer_buffer>
 608:	ab dd       	rcall	.-1194   	; 0x160 <MCP2517_deassertCS>
	buff[index + 2] = (uint8_t) (value >> 16);
	buff[index + 3] = (uint8_t) (value >> 24);
}

inline uint32_t wordFromBufferAtIndex (uint8_t buff[], const uint8_t index) {
	uint32_t result = (uint32_t) buff[index + 0];
 60a:	28 8d       	ldd	r18, Y+24	; 0x18
	result |= ((uint32_t) buff[index + 1]) << 8;
	result |= ((uint32_t) buff[index + 2]) << 16;
 60c:	39 8d       	ldd	r19, Y+25	; 0x19
 60e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	a0 e0       	ldi	r26, 0x00	; 0
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	dc 01       	movw	r26, r24
 618:	99 27       	eor	r25, r25
 61a:	88 27       	eor	r24, r24
 61c:	93 2b       	or	r25, r19
 61e:	82 2b       	or	r24, r18
			buff[i + 8 + j] = 0;
		}
	}
	
	// Write instruction
	const uint16_t regAddr = MCP2517_RAM_ADDR_START + MCP2517_readReg32(MCP2517_REG_ADDR_C1FIFOUA + (MCP2517_TX_FIFO * MCP2517_C1FIFO_OFFSET));
 620:	9c 5f       	subi	r25, 0xFC	; 252
	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 622:	9f 70       	andi	r25, 0x0F	; 15
 624:	90 5e       	subi	r25, 0xE0	; 224
 626:	99 83       	std	Y+1, r25	; 0x01
	buff[1] = (uint8_t) (regAddr & 0xFF);
 628:	8a 83       	std	Y+2, r24	; 0x02
	
	// Add TX Message Object's ID bits to buffer
	buff[2] = txObj->MCP2517_byte[0];
 62a:	d8 01       	movw	r26, r16
 62c:	8c 91       	ld	r24, X
 62e:	8b 83       	std	Y+3, r24	; 0x03
	buff[3] = txObj->MCP2517_byte[1];
 630:	11 96       	adiw	r26, 0x01	; 1
 632:	8c 91       	ld	r24, X
 634:	11 97       	sbiw	r26, 0x01	; 1
 636:	8c 83       	std	Y+4, r24	; 0x04
	buff[4] = txObj->MCP2517_byte[2];
 638:	12 96       	adiw	r26, 0x02	; 2
 63a:	8c 91       	ld	r24, X
 63c:	12 97       	sbiw	r26, 0x02	; 2
 63e:	8d 83       	std	Y+5, r24	; 0x05
	buff[5] = txObj->MCP2517_byte[3];
 640:	13 96       	adiw	r26, 0x03	; 3
 642:	8c 91       	ld	r24, X
 644:	13 97       	sbiw	r26, 0x03	; 3
 646:	8e 83       	std	Y+6, r24	; 0x06
	// Add TX Message Object's ID Control bits to buffer
	buff[6] = txObj->MCP2517_byte[4];
 648:	14 96       	adiw	r26, 0x04	; 4
 64a:	8c 91       	ld	r24, X
 64c:	14 97       	sbiw	r26, 0x04	; 4
 64e:	8f 83       	std	Y+7, r24	; 0x07
	buff[7] = txObj->MCP2517_byte[5];
 650:	15 96       	adiw	r26, 0x05	; 5
 652:	8c 91       	ld	r24, X
 654:	15 97       	sbiw	r26, 0x05	; 5
 656:	88 87       	std	Y+8, r24	; 0x08
	buff[8] = txObj->MCP2517_byte[6];
 658:	16 96       	adiw	r26, 0x06	; 6
 65a:	8c 91       	ld	r24, X
 65c:	16 97       	sbiw	r26, 0x06	; 6
 65e:	89 87       	std	Y+9, r24	; 0x09
	buff[9] = txObj->MCP2517_byte[7];
 660:	17 96       	adiw	r26, 0x07	; 7
 662:	8c 91       	ld	r24, X
 664:	8a 87       	std	Y+10, r24	; 0x0a
	
	// Loop through and add the payload data bytes to the buffer
	for (i = 0; i < numDataBytes; i++) {
 666:	ff 20       	and	r15, r15
 668:	79 f0       	breq	.+30     	; 0x688 <MCP2517_loadMsgTXFifo+0x10e>
 66a:	ad 2d       	mov	r26, r13
 66c:	be 2d       	mov	r27, r14
 66e:	fe 01       	movw	r30, r28
 670:	3b 96       	adiw	r30, 0x0b	; 11
 672:	fa 94       	dec	r15
 674:	9e 01       	movw	r18, r28
 676:	2f 0d       	add	r18, r15
 678:	31 1d       	adc	r19, r1
 67a:	24 5f       	subi	r18, 0xF4	; 244
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
		buff[i + 10] = payload[i];
 67e:	8d 91       	ld	r24, X+
 680:	81 93       	st	Z+, r24
	buff[7] = txObj->MCP2517_byte[5];
	buff[8] = txObj->MCP2517_byte[6];
	buff[9] = txObj->MCP2517_byte[7];
	
	// Loop through and add the payload data bytes to the buffer
	for (i = 0; i < numDataBytes; i++) {
 682:	e2 17       	cp	r30, r18
 684:	f3 07       	cpc	r31, r19
		buff[i + 10] = payload[i];
	}

	// Send CAN packet via SPI
	MCP2517_assertCS();
 686:	d9 f7       	brne	.-10     	; 0x67e <MCP2517_loadMsgTXFifo+0x104>
	spi_transfer_buffer(buff, sizeof(buff));
 688:	69 dd       	rcall	.-1326   	; 0x15c <MCP2517_assertCS>
 68a:	65 e1       	ldi	r22, 0x15	; 21
 68c:	ce 01       	movw	r24, r28
 68e:	01 96       	adiw	r24, 0x01	; 1
	MCP2517_deassertCS();
 690:	9f d0       	rcall	.+318    	; 0x7d0 <spi_transfer_buffer>
 692:	66 dd       	rcall	.-1332   	; 0x160 <MCP2517_deassertCS>
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 694:	80 e2       	ldi	r24, 0x20	; 32
	buff[1] = (uint8_t) (regAddr & 0xFF);
 696:	8e 8b       	std	Y+22, r24	; 0x16
 698:	8d e5       	ldi	r24, 0x5D	; 93
	buff[2] = value;
 69a:	8f 8b       	std	Y+23, r24	; 0x17
	
	MCP2517_assertCS();
 69c:	83 e0       	ldi	r24, 0x03	; 3
 69e:	88 8f       	std	Y+24, r24	; 0x18
	spi_transfer_buffer(buff, 3);
 6a0:	5d dd       	rcall	.-1350   	; 0x15c <MCP2517_assertCS>
 6a2:	63 e0       	ldi	r22, 0x03	; 3
 6a4:	ce 01       	movw	r24, r28
 6a6:	46 96       	adiw	r24, 0x16	; 22
 6a8:	93 d0       	rcall	.+294    	; 0x7d0 <spi_transfer_buffer>
	MCP2517_deassertCS();
 6aa:	5a dd       	rcall	.-1356   	; 0x160 <MCP2517_deassertCS>
 6ac:	6b 96       	adiw	r28, 0x1b	; 27
	MCP2517_deassertCS();
	
	// Increment FIFO and send message
	const uint8_t d = (1 << 0) | (1 << 1); // Set UINC, TXREQ bit
	MCP2517_writeReg8(MCP2517_REG_ADDR_C1FIFOCON + (MCP2517_TX_FIFO * MCP2517_C1FIFO_OFFSET) + 1, d);
}
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	f8 94       	cli
 6b2:	de bf       	out	0x3e, r29	; 62
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	cd bf       	out	0x3d, r28	; 61
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	1f 91       	pop	r17
 6be:	0f 91       	pop	r16
 6c0:	ff 90       	pop	r15
 6c2:	ef 90       	pop	r14
 6c4:	df 90       	pop	r13
 6c6:	bf 90       	pop	r11
 6c8:	af 90       	pop	r10
 6ca:	08 95       	ret

000006cc <MCP2517_transmitMessage>:
 6cc:	8f 92       	push	r8
}

// *****************************************************************************
// MCP2517 Transmit Functions
// *****************************************************************************
uint8_t MCP2517_transmitMessage(CAN_SEND_ADDRESS canMessageID, uint8_t numDataBytes, uint8_t *messageData) {
 6ce:	9f 92       	push	r9
 6d0:	af 92       	push	r10
 6d2:	bf 92       	push	r11
 6d4:	ef 92       	push	r14
 6d6:	ff 92       	push	r15
 6d8:	1f 93       	push	r17
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
 6e2:	2d 97       	sbiw	r28, 0x0d	; 13
 6e4:	0f b6       	in	r0, 0x3f	; 63
 6e6:	f8 94       	cli
 6e8:	de bf       	out	0x3e, r29	; 62
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	cd bf       	out	0x3d, r28	; 61
 6ee:	14 2f       	mov	r17, r20
 6f0:	79 01       	movw	r14, r18
	
	// Check if numDataBytes > 8
	if (numDataBytes > 8) {
 6f2:	49 30       	cpi	r20, 0x09	; 9
 6f4:	20 f0       	brcs	.+8      	; 0x6fe <MCP2517_transmitMessage+0x32>
		uart0_transmit(MCP2517_MESSAGE_SIZE_ERROR);
 6f6:	84 e0       	ldi	r24, 0x04	; 4
 6f8:	82 d0       	rcall	.+260    	; 0x7fe <uart0_transmit>
		return MCP2517_MESSAGE_SIZE_ERROR;
 6fa:	84 e0       	ldi	r24, 0x04	; 4
 6fc:	52 c0       	rjmp	.+164    	; 0x7a2 <MCP2517_transmitMessage+0xd6>
	
	// Create transmit message object
	MCP2517_TX_MSG_OBJ txObj;
	
	// Set ID and CTRL bits to 0
	txObj.MCP2517_word[0] = 0;
 6fe:	19 82       	std	Y+1, r1	; 0x01
 700:	1a 82       	std	Y+2, r1	; 0x02
 702:	1b 82       	std	Y+3, r1	; 0x03
 704:	1c 82       	std	Y+4, r1	; 0x04
	txObj.MCP2517_word[1] = 0;
 706:	1d 82       	std	Y+5, r1	; 0x05
 708:	1e 82       	std	Y+6, r1	; 0x06
 70a:	1f 82       	std	Y+7, r1	; 0x07
 70c:	18 86       	std	Y+8, r1	; 0x08
	// Configure ID bits
	txObj.MCP2517_bF.MCP2517_id.MCP2517_SID = canMessageID >> 18; // Base ID
 70e:	4b 01       	movw	r8, r22
 710:	5c 01       	movw	r10, r24
 712:	07 2e       	mov	r0, r23
 714:	72 e1       	ldi	r23, 0x12	; 18
 716:	b6 94       	lsr	r11
 718:	a7 94       	ror	r10
 71a:	97 94       	ror	r9
 71c:	87 94       	ror	r8
 71e:	7a 95       	dec	r23
 720:	d1 f7       	brne	.-12     	; 0x716 <MCP2517_transmitMessage+0x4a>
 722:	70 2d       	mov	r23, r0
 724:	89 82       	std	Y+1, r8	; 0x01
	txObj.MCP2517_bF.MCP2517_id.MCP2517_EID = canMessageID; // Extended ID
 726:	26 2f       	mov	r18, r22
 728:	22 0f       	add	r18, r18
 72a:	22 0f       	add	r18, r18
 72c:	22 0f       	add	r18, r18
 72e:	39 2d       	mov	r19, r9
 730:	37 70       	andi	r19, 0x07	; 7
 732:	23 2b       	or	r18, r19
 734:	2a 83       	std	Y+2, r18	; 0x02
 736:	27 2f       	mov	r18, r23
 738:	22 0f       	add	r18, r18
 73a:	22 0f       	add	r18, r18
 73c:	22 0f       	add	r18, r18
 73e:	36 2f       	mov	r19, r22
 740:	32 95       	swap	r19
 742:	36 95       	lsr	r19
 744:	37 70       	andi	r19, 0x07	; 7
 746:	23 2b       	or	r18, r19
 748:	2b 83       	std	Y+3, r18	; 0x03
 74a:	27 2f       	mov	r18, r23
 74c:	22 95       	swap	r18
 74e:	26 95       	lsr	r18
 750:	27 70       	andi	r18, 0x07	; 7
 752:	3c 81       	ldd	r19, Y+4	; 0x04
 754:	30 7e       	andi	r19, 0xE0	; 224
 756:	98 2f       	mov	r25, r24
 758:	93 70       	andi	r25, 0x03	; 3
 75a:	99 0f       	add	r25, r25
 75c:	99 0f       	add	r25, r25
 75e:	99 0f       	add	r25, r25
 760:	83 2f       	mov	r24, r19
 762:	82 2b       	or	r24, r18
 764:	89 2b       	or	r24, r25
 766:	8c 83       	std	Y+4, r24	; 0x04
	// Configure CTRL bits
	txObj.MCP2517_bF.MCP2517_ctrl.MCP2517_FDF = 0; // CAN 2.B frame
	txObj.MCP2517_bF.MCP2517_ctrl.MCP2517_BRS = 1; // Switch data bit rate
	txObj.MCP2517_bF.MCP2517_ctrl.MCP2517_IDE = 1; // Extended format frame
	txObj.MCP2517_bF.MCP2517_ctrl.MCP2517_RTR = 0; // Not a remote frame request
	txObj.MCP2517_bF.MCP2517_ctrl.MCP2517_DLC = numDataBytes; // Data length code
 768:	84 2f       	mov	r24, r20
 76a:	8f 70       	andi	r24, 0x0F	; 15
 76c:	80 65       	ori	r24, 0x50	; 80
 76e:	8d 83       	std	Y+5, r24	; 0x05

	// Check that FIFO is not full
	MCP2517_TX_FIFO_STATUS txFlags;

	MCP2517_transmitFifoStatus(MCP2517_TX_FIFO, &txFlags);
 770:	be 01       	movw	r22, r28
 772:	63 5f       	subi	r22, 0xF3	; 243
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	fb dd       	rcall	.-1034   	; 0x370 <MCP2517_transmitFifoStatus>
	
	// If not full proceed to append FIFO to buffer and transmit
	if (txFlags & MCP2517_TX_FIFO_NOT_FULL_STATUS) {
 77a:	8d 85       	ldd	r24, Y+13	; 0x0d
 77c:	80 ff       	sbrs	r24, 0
 77e:	10 c0       	rjmp	.+32     	; 0x7a0 <MCP2517_transmitMessage+0xd4>
		//LED_A_ON;
		MCP2517_loadMsgTXFifo(&txObj, messageData, numDataBytes);
 780:	41 2f       	mov	r20, r17
 782:	b7 01       	movw	r22, r14
 784:	ce 01       	movw	r24, r28
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	f8 de       	rcall	.-528    	; 0x57a <MCP2517_loadMsgTXFifo>
 78a:	2f ef       	ldi	r18, 0xFF	; 255
 78c:	81 ee       	ldi	r24, 0xE1	; 225
 78e:	94 e0       	ldi	r25, 0x04	; 4
 790:	21 50       	subi	r18, 0x01	; 1
 792:	80 40       	sbci	r24, 0x00	; 0
 794:	90 40       	sbci	r25, 0x00	; 0
 796:	e1 f7       	brne	.-8      	; 0x790 <MCP2517_transmitMessage+0xc4>
 798:	00 c0       	rjmp	.+0      	; 0x79a <MCP2517_transmitMessage+0xce>
 79a:	00 00       	nop
		_delay_ms(100);
		//LED_A_OFF;
	}
	
	return MCP2517_NO_ERROR;
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	01 c0       	rjmp	.+2      	; 0x7a2 <MCP2517_transmitMessage+0xd6>
 7a0:	81 e0       	ldi	r24, 0x01	; 1
}
 7a2:	2d 96       	adiw	r28, 0x0d	; 13
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	f8 94       	cli
 7a8:	de bf       	out	0x3e, r29	; 62
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	cd bf       	out	0x3d, r28	; 61
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	1f 91       	pop	r17
 7b4:	ff 90       	pop	r15
 7b6:	ef 90       	pop	r14
 7b8:	bf 90       	pop	r11
 7ba:	af 90       	pop	r10
 7bc:	9f 90       	pop	r9
 7be:	8f 90       	pop	r8
 7c0:	08 95       	ret

000007c2 <spi_init>:
	SPDR = data;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
	/* Return any data that was shifted into this register upon transmission  */
	return SPDR;
}
 7c2:	66 0f       	add	r22, r22
 7c4:	80 65       	ori	r24, 0x50	; 80
 7c6:	86 2b       	or	r24, r22
 7c8:	8c bd       	out	0x2c, r24	; 44
 7ca:	1d bc       	out	0x2d, r1	; 45
 7cc:	1e bc       	out	0x2e, r1	; 46
 7ce:	08 95       	ret

000007d0 <spi_transfer_buffer>:

// FULLY WORKING
void spi_transfer_buffer(uint8_t *buf, uint8_t count)
{
	if (count == 0) return;
 7d0:	66 23       	and	r22, r22
 7d2:	a1 f0       	breq	.+40     	; 0x7fc <spi_transfer_buffer+0x2c>
 7d4:	fc 01       	movw	r30, r24
 7d6:	61 50       	subi	r22, 0x01	; 1
 7d8:	26 2f       	mov	r18, r22
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	2f 5f       	subi	r18, 0xFF	; 255
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	82 0f       	add	r24, r18
 7e2:	93 1f       	adc	r25, r19
 7e4:	df 01       	movw	r26, r30
	for(uint8_t i = 0; i < count; i++) {
		uint8_t out = *(buf + i);
 7e6:	20 81       	ld	r18, Z
		SPDR = out;
 7e8:	2e bd       	out	0x2e, r18	; 46
		while(!(SPSR & (1<<SPIF)));
 7ea:	0d b4       	in	r0, 0x2d	; 45
 7ec:	07 fe       	sbrs	r0, 7
 7ee:	fd cf       	rjmp	.-6      	; 0x7ea <spi_transfer_buffer+0x1a>
		*(buf + i) = SPDR;
 7f0:	2e b5       	in	r18, 0x2e	; 46
 7f2:	2c 93       	st	X, r18
 7f4:	31 96       	adiw	r30, 0x01	; 1

// FULLY WORKING
void spi_transfer_buffer(uint8_t *buf, uint8_t count)
{
	if (count == 0) return;
	for(uint8_t i = 0; i < count; i++) {
 7f6:	e8 17       	cp	r30, r24
 7f8:	f9 07       	cpc	r31, r25
 7fa:	a1 f7       	brne	.-24     	; 0x7e4 <spi_transfer_buffer+0x14>
 7fc:	08 95       	ret

000007fe <uart0_transmit>:
	UCSR0C = (3 << UCSZ00);
}

void uart0_transmit(uint8_t data) {
	/* wait for empty transmit buffer */
	while( !(UCSR0A & (1 << UDRE0)) );
 7fe:	e0 ec       	ldi	r30, 0xC0	; 192
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	90 81       	ld	r25, Z
 804:	95 ff       	sbrs	r25, 5
 806:	fd cf       	rjmp	.-6      	; 0x802 <uart0_transmit+0x4>
	/* put data into buffer, sends the data */
	UDR0 = data;
 808:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 80c:	08 95       	ret

0000080e <_exit>:
 80e:	f8 94       	cli

00000810 <__stop_program>:
 810:	ff cf       	rjmp	.-2      	; 0x810 <__stop_program>
